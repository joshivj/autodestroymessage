Algorithm for secureNote

Forward:

1) Generate Random slug
   random = ''.join([random.choice(string.ascii_letters + string.digits) for n in xrange(32)])

2) Hash this random number, and get HashedNoteID.
import hashlib
print hashlib.md5("whatever your string is").hexdigest()

3) Hashing algorithm(SHA-1)

4) Encrypt the Note content using NoteID and store encrypted version in DB using HashedNoteID as primaryKey.

Reverse:

1) Extract NoteID from URL
2) hash this noteID and you will get HashedNoteID.This is the same HashedNoteID used when generating the note, since the NoteID used to make the hash is the same in both cases

3)  The server retrieves the note from the database using HashedNoteID as the database primary key and decrypts its contents using NoteID as the encryption key

4) The server shows the page with the decrypted note

5) The server permanently deletes the note from the database, keeping only a record of the HashedNoteID, the time when it was read, and the IP address where it was read from, to show it when someone tries to see the note again


Program:


from Crypto import Random
from Crypto.Cipher import AES

def pad(s):
    return s + b"\0" * (AES.block_size - len(s) % AES.block_size)

def encrypt(message, key, key_size=256):
    message = pad(message)
    iv = Random.new().read(AES.block_size)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return iv + cipher.encrypt(message)

def decrypt(ciphertext, key):
    iv = ciphertext[:AES.block_size]
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = cipher.decrypt(ciphertext[AES.block_size:])
    return plaintext.rstrip(b"\0")


Output check: 
slug = gL3umj0n878gQQnGPTIjBHU0fRovl3Am

hex = a26504c5e552596fc51630c20d853738

encrypt("Hi this is text to check the encryption alogithm","a26504c5e552596fc51630c20d853738")
Out[65]: '*\xa8\xcb\xdc\'5\xdd?\ne\xe3\x19\xf1\x00 YE\xb0\x01JN\x13\x1fp-\x85G\xf4\x16f\xa3\xc7\x87\x1c\xc1\xe1\xe8t\xef\x10\xb3\nvqw\x91\x06\xea\\\x1c\x96\x8f\xb4#s\x8d\xd3L%\xe9\xc5O\xe5\xbcv-\xcf\xb1\x82DoGK\x19D"e\nKb'

encryptText = '*\xa8\xcb\xdc\'5\xdd?\ne\xe3\x19\xf1\x00 YE\xb0\x01JN\x13\x1fp-\x85G\xf4\x16f\xa3\xc7\x87\x1c\xc1\xe1\xe8t\xef\x10\xb3\nvqw\x91\x06\xea\\\x1c\x96\x8f\xb4#s\x8d\xd3L%\xe9\xc5O\xe5\xbcv-\xcf\xb1\x82DoGK\x19D"e\nKb'

In [67]: decrypt(encryptText,"a26504c5e552596fc51630c20d853738")
Out[67]: 'Hi this is text to check the encryption alogithm'
